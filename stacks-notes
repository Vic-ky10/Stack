Push: Adds an element to the top of the stack.
Pop: Removes and returns the top element from the stack.
It fundamental data structure in computer science that follows the Last In, First Out (LIFO) principle. This means that the last element added to the stack will be the first one to be removed. Stacks are widely used in various applications, such as function call management, undo mechanisms, and parsing expressions.

Extreme Conditions in a Stack
Stack Underflow:
Occurs when you try to perform a pop or peek operation on an empty stack.
Handling: Check if the stack is empty before performing these operations.
Stack Overflow:
Occurs when you try to push an element into a stack that has reached its maximum capacity (in languages or implementations where the stack size is fixed).
Handling: Check if the stack is full before performing a push operation


2. Linked List Implementation of Stack in JavaScript
In a stack implementation, we need to do push and pop operations at the same end.
In a linked list, we can do both operations at the beginning of the list (or first element) in O(1) time.



// Node class representing each element in the stack
class Node {
    constructor(value)
    {
        this.value = value;
        this.next = null;
    }
}
​
// Stack class using a Linked List
class Stack {
    constructor()
    {
        this.top = null;
        this.size = 0;
    }
​
    // Push operation
    push(value)
    {
        const newNode = new Node(value);
        newNode.next = this.top;
        this.top = newNode;
        this.size++;
    }
​
    // Pop operation
    pop()
    {
        if (this.isEmpty()) {
            console.log("Stack is empty!");
            return null;
        }
        const poppedValue = this.top.value;
        this.top = this.top.next;
        this.size--;
        return poppedValue;
    }
​
    // Peek operation
    peek()
    {
        return this.isEmpty() ? null : this.top.value;
    }
​
    // Check if the stack is empty
    isEmpty() { return this.size === 0; }
​
    // Returns the size of the stack
    getSize() { return this.size; }
​
    // Print stack elements
    printStack()
    {
        let current = this.top;
        let stackValues = [];
        while (current) {
            stackValues.push(current.value);
            current = current.next;
        }
        console.log("Stack:", stackValues.join(" -> "));
    }
}
​
// Example Usage
const stack = new Stack();
stack.push(10);
stack.push(20);
stack.push(30);
stack.printStack();
console.log("Top Element:", stack.peek());
console.log("Popped Element:", stack.pop());
stack.printStack();

Output
Stack: 30 -> 20 -> 10
Top Element: 30
Popped Element: 30
Stack: 20 -> 10